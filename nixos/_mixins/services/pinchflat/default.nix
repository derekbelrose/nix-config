{ config, pkgs, lib, ... }:

{
	users.users."pinchflat" = {
		name = "pinchflat";
		isSystemUser = true;
		group = "pinchflat";	
	};

	users.groups.pinchflat = {
	};


	#sops.secrets.mealie = {
	#	sopsFile = ./mealie.enc.env;
	#	format = "dotenv";
	#	owner = config.users.users.mealie.name;
	#	group = config.users.groups.mealie.name;	
	#};

  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."pinchflat-pinchflat" = {
    image = "ghcr.io/kieraneglin/pinchflat:latest";
    environment = {
			"TZ" = "America/New_York";
    };
		#environmentFiles = [
		#	config.sops.secrets.pinchflat.path
		#];
    volumes = [
      "/store/service-data/pinchflat/config:/config:rw"
      "/store/service-data/pinchflat/downloads:/downloads:rw"
    ];
    ports = [
      "8945:8945/tcp"
    ];
    log-driver = "journald";
  };
  systemd.services."podman-pinchflat" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-pinchflat_default.service"
    ];
    requires = [
      "podman-network-pinchflat_default.service"
    ];
    partOf = [
      "podman-compose-pinchflat-root.target"
    ];
    wantedBy = [
      "podman-compose-pinchflat-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-pinchflat_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f pinchflat_default";
    };
    script = ''
      podman network inspect pinchflat_default || podman network create pinchflat_default
    '';
    partOf = [ "podman-compose-pinchflat-root.target" ];
    wantedBy = [ "podman-compose-pinchflat-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.user.targets."podman-compose-pinchflat-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
